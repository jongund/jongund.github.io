<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="funct.css" type="text/css"?>
<?xm-well_formed path="funct.dtd"?>
<slides>
  <lang>en</lang>
  <title>Introduction to ARIA Specification and Practices</title>
  <logo>
    <a href="https://openweba11y.com" aria-label="Open Web Accessibility">
      <span class="brand"><span class="open">Open</span><span class="web">Web</span><span class="a11y">A11y</span></span>
    </a>
  </logo>

  <copyright>
     Copyright &#169; 2024 Jon Gunderson
  </copyright>

  <person>
    <name>Jon Gunderson, Ph.D., CWAP</name>
    <desc href="https://openweba11y.com">Open Web Accessibility Services</desc>
    <desc href="mailto:jongund@openweba11y.com">jongund@openweba11y.com</desc>
  </person>


  <home href="../index.html">All Sessions</home>

  <stylesheet media="screen">../..//css/bootstrap.min.css</stylesheet>
  <stylesheet media="screen">../..//css/html-slides.css</stylesheet>

  <script>../../js/bootstrap.bundle.min.js</script>
  <script>../../js/html-slides-2.js</script>
  <script>../../js/html-slides-code.js</script>

  <slide>
    <title>Goals</title>
    <contents>
      <ul>
        <li>w3C ARIA AUthoring Practices as a Resource</li>
        <li>Menu Button design pattern and example</li>
      </ul>
      <div class="show-slide-url"></div>
    </contents>
  </slide>

  <slide>
    <title>Menu Button: ARIA Design Pattern</title>
    <contents>
    <ul>
      <li><a href="https://www.w3.org/TR/wai-aria-practices/#menubutton" target="_specification">ARIA Authoring Practices: Menu Button</a></li>
      <li><a href="https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-actions.html">Example 1: Action Menu</a></li>
      <li><a href="https://www.w3.org/TR/wai-aria-practices/examples/menu-button/menu-button-links.html">Example 2: Navigation Menu</a></li>
      <li><a href="https://www.w3.org/TR/wai-aria-practices/examples/menu-button//menu-button-actions-active-descendant.html">Example 3: Action Menu (<code>aria-activedescendant</code>)</a></li>
    </ul>
    <iframe src="https://www.w3.org/TR/wai-aria-practices/#menubutton"
            title="ARIA Menubutton Example"
            width="98%"
            height="600px"/>
    </contents>
  </slide>

  <slide>
    <title>Menu Button: Overview</title>
    <contents>
      <ul>
        <li>Demonstrate accessibility issues of custom widgets.</li>
        <li>Incrementally add accessibility features.</li>
        <li>Observe changes in user experience as features are added.</li>
        <li>Learn what ARIA markup does and doesn't do.</li>
        <li>Focus and hover styling.</li>
        <li>High contrast testing.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Menu Button: Inaccessible</title>
    <style id="style">
      .menu-button-links {
        margin: 0;
        font-size: 110%;
      }

      .menu-button-links button {
        margin: 0;
        padding: 6px;
        display: inline-block;
        position: relative;
        background-color: #034575;
        border: 1px solid #034575;
        font-size: 0.9em;
        color: white;
        border-radius: 5px;
      }

      .menu-button-links .menu {
        margin: 0;
        padding: 7px 4px;
        list-style: none;
        display: none;
        position: absolute;
        border: 2px solid #034575;
        border-radius: 5px;
        background-color: #eee;
      }

      .menu-button-links .menu a {
        margin: 0;
        padding: 6px;
        display: block;
        width: 24em;
        background-color: #eee;
        border: none;
        color: black;
        border-radius: 5px;
        text-decoration: none;
      }

      .menu-button-links .menu a:hover {
        background-color: #034575;
        color: white;
       }

      .menu-button-links button svg.down {
        padding-left: 0.125em;
        fill: currentColor;
        stroke: currentColor;
      }

      .menu-button-links button.open svg.down {
        transform: rotate(180deg);
      }

    </style>
    <contents>
     <h2>Accessibility Issues</h2>
     <ul>
      <li>Keyboard support</li>
      <li>Role information</li>
      <li>Identification of a menu button</li>
      <li>Accessible names</li>
      <li>State of menu open/closed</li>
      <li>Keyboard focus styling</li>
     </ul>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/nav-menu-button-inaccessible/output/" target="_webedit">Menu Button: Inaccessible (on WebEdit)</a></p>

     <script id="script">
        class MenuButtonLinks {

          constructor(domNode) {

            this.domNode       = domNode;
            this.buttonNode    = domNode.querySelector('button');
            this.menuNode      = domNode.querySelector('ul');

            this.buttonNode.addEventListener('click', this.onButtonClick.bind(this));
            this.buttonNode.addEventListener('blur', this.onBlur.bind(this));

            const links = domNode.querySelectorAll('a');
            for (let i = 0; i &lt; links.length; i += 1) {
              links[i].addEventListener('blur', this.onBlur.bind(this));
            }
            window.addEventListener('mousedown', this.onBackgroundMousedown.bind(this), true);
          }

          // Popup menu methods

          openPopup() {
            var rect = this.menuNode.getBoundingClientRect();
            this.menuNode.style.display = 'block';
            this.buttonNode.classList.add('open');
          }

          closePopup() {
            if (this.isOpen()) {
              this.buttonNode.classList.remove('open');
              this.menuNode.style.display = 'none';
            }
          }

          isOpen() {
            return this.buttonNode.classList.contains('open');
          }

          onButtonClick(event) {
            if (this.isOpen()) {
              this.closePopup();
            }
            else {
              this.openPopup();
            }

            event.stopPropagation();
            event.preventDefault();
          }

          onBlur(event) {
            if (!this.domNode.contains(event.relatedTarget)) {
              if (this.isOpen()) {
                this.closePopup();
              }
            }
          }

          onBackgroundMousedown(event) {
            if (!this.domNode.contains(event.target)) {
              if (this.isOpen()) {
                this.closePopup();
                this.buttonNode.focus();
              }
            }
          }
        }

        // Initialize navigation menu buttons

        window.addEventListener('load', function () {
          var menuButtons = document.querySelectorAll('.menu-button-links');
          for(var i=0; i &lt; menuButtons.length; i++) {
            var menuButton = new MenuButtonLinks(menuButtons[i]);
          }
        });
     </script>

     <div id="example">
        <div class="menu-button-links">
          <button type="button">
            WAI-ARIA Quick Links
            <svg xmlns="https://www.w3.org/2000/svg"
                 class="down"
                 width="12"
                 height="9"
                 viewBox="0 0 12 9">
              <polygon points="1 0, 11 0, 6 8"></polygon>
            </svg>
          </button>
          <ul class="menu">
            <li>
              <a href="https://www.w3.org/">
                W3C Home Page
              </a>
            </li>
            <li>
              <a href="https://www.w3.org/standards/webdesign/accessibility">
                W3C Web Accessibility Initiative
              </a>
            </li>
            <li>
              <a href="https://www.w3.org/TR/wai-aria/">
                ARIA Specification
              </a>
            </li>
            <li>
              <a href="https://w3c.github.io/aria-practices/">
                Authoring Practices
              </a>
            </li>
            <li>
              <a href="https://www.w3.org/TR/html-aria/#el-li">
                HTML Accessibility API Mappings
              </a>
            </li>
            <li>
              <a href="https://w3c.github.io/core-aam/#mapping_role">
                Core ARIA Accessibility API Mappings
              </a>
            </li>
            <li>
              <a href="https://www.w3.org/TR/accname-aam-1.1/">
                Accessible Name and Description
              </a>
            </li>
          </ul>
        </div>

     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
    <transcript>
    </transcript>
  </slide>

  <slide>
    <title>Menu Button: Keyboard Support</title>
    <style id="style">
      .menu-button-links {
        margin: 0;
        font-size: 110%;
      }

      .menu-button-links button {
        margin: 0;
        padding: 6px;
        display: inline-block;
        position: relative;
        background-color: #034575;
        border: 1px solid #034575;
        font-size: 0.9em;
        color: white;
        border-radius: 5px;
      }

      .menu-button-links .menu {
        margin: 0;
        padding: 7px 4px;
        list-style: none;
        display: none;
        position: absolute;
        border: 2px solid #034575;
        border-radius: 5px;
        background-color: #eee;
      }

      .menu-button-links .menu a {
        margin: 0;
        padding: 6px;
        display: block;
        width: 24em;
        background-color: #eee;
        border: none;
        color: black;
        border-radius: 5px;
        text-decoration: none;
      }

      .menu-button-links .menu a:hover {
        background-color: #034575;
        color: white;
       }

      .menu-button-links button svg.down {
        padding-left: 0.125em;
        fill: currentColor;
        stroke: currentColor;
      }

      .menu-button-links button.open svg.down {
        transform: rotate(180deg);
      }
    </style>
    <contents>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/nav-menu-button-add-keyboard/output/" target="_webedit">Menu Button example with keyboard support on WebEdit</a></p>

     <script id="script">
        class MenuButtonLinks {

          constructor(domNode) {

            this.domNode       = domNode;
            this.buttonNode    = domNode.querySelector('button');
            this.menuNode      = domNode.querySelector('.menu');
            this.menuitemNodes = []
            this.firstMenuitem = false;
            this.lastMenuitem  = false;
            this.firstChars = [];

            this.buttonNode.addEventListener('keydown', this.onButtonKeydown.bind(this));
            this.buttonNode.addEventListener('click', this.onButtonClick.bind(this));

            var nodes = this.menuNode.querySelectorAll('a');

            for (var i = 0; i &lt; nodes.length; i++) {
              var menuitem = nodes[i];
              this.menuitemNodes.push(menuitem);
              menuitem.tabIndex = -1;
              this.firstChars.push(menuitem.textContent.trim()[0].toLowerCase());

              menuitem.addEventListener('keydown', this.onMenuitemKeydown.bind(this));

              menuitem.addEventListener('mouseover', this.onMenuitemMouseover.bind(this));

              if( !this.firstMenuitem) {
                this.firstMenuitem = menuitem;
              }
              this.lastMenuitem = menuitem;
            }

            domNode.addEventListener('focusin', this.onFocusin.bind(this));
            domNode.addEventListener('focusout', this.onFocusout.bind(this));

            window.addEventListener('mousedown', this.onBackgroundMousedown.bind(this), true);
          }

          // Popup menu methods

          openPopup() {
            var rect = this.menuNode.getBoundingClientRect();
            this.menuNode.style.display = 'block';
            this.buttonNode.classList.add('open');
          }

          closePopup() {
            if (this.isOpen()) {
              this.buttonNode.classList.remove('open');
              this.menuNode.style.display = 'none';
            }
          }

          isOpen() {
            return this.buttonNode.classList.contains('open');
          }

          // Focus management methods

          setFocusToMenuitem(newMenuitem) {
            this.menuitemNodes.forEach(function(item) {
              if (item === newMenuitem) {
                item.tabIndex = 0;
                newMenuitem.focus();
              }
              else {
                item.tabIndex = -1;
              }
            });
          }

          setFocusToFirstMenuitem(currentMenuitem) {
            this.setFocusToMenuitem(this.firstMenuitem);
          }

          setFocusToLastMenuitem(currentMenuitem) {
            this.setFocusToMenuitem(this.lastMenuitem);
          }

          setFocusToPreviousMenuitem(currentMenuitem) {
            var newMenuitem, index;

            if (currentMenuitem === this.firstMenuitem) {
              newMenuitem = this.lastMenuitem;
            }
            else {
              index = this.menuitemNodes.indexOf(currentMenuitem);
              newMenuitem = this.menuitemNodes[ index - 1 ];
            }

            this.setFocusToMenuitem(newMenuitem);

            return newMenuitem;
          }

          setFocusToNextMenuitem(currentMenuitem) {
            var newMenuitem, index;

            if (currentMenuitem === this.lastMenuitem) {
              newMenuitem = this.firstMenuitem;
            }
            else {
              index = this.menuitemNodes.indexOf(currentMenuitem);
              newMenuitem = this.menuitemNodes[ index + 1 ];
            }
            this.setFocusToMenuitem(newMenuitem);

            return newMenuitem;
          }

          setFocusByFirstCharacter(currentMenuitem, char) {
            var start, index;

            if (char.length > 1) {
              return;
            }

            char = char.toLowerCase();

            // Get start index for search based on position of currentItem
            start = this.menuitemNodes.indexOf(currentMenuitem) + 1;
            if (start >=  this.menuitemNodes.length) {
              start = 0;
            }

            // Check remaining slots in the menu
            index = this.firstChars.indexOf(char, start);

            // If not found in remaining slots, check from beginning
            if (index === -1) {
              index = this.firstChars.indexOf(char, 0);
            }

            // If match was found...
            if (index > -1) {
              this.setFocusToMenuitem(this.menuitemNodes[index]);
            }
          }

          // Utilities

          getIndexFirstChars(startIndex, char) {
            for (var i = startIndex; i &lt; this.firstChars.length; i++) {
              if (char === this.firstChars[i]) {
                return i;
              }
            }
            return -1;
          }


          // Menu event handlers

          onFocusin(event) {
            this.domNode.classList.add('focus');
          }

          onFocusout(event) {
            this.domNode.classList.remove('focus');
          }

          onButtonKeydown(event) {
            var tgt = event.currentTarget,
              key = event.key,
              flag = false;

            switch (key) {
              case ' ':
              case 'Enter':
              case 'ArrowDown':
              case 'Down':
                this.openPopup();
                this.setFocusToFirstMenuitem();
                flag = true;
               break;

              case 'Esc':
              case 'Escape':
                  this.closePopup();
                  this.buttonNode.focus();
                  flag = true;
                break;

              case 'Up':
              case 'ArrowUp':
                this.openPopup();
                this.setFocusToLastMenuitem();
                flag = true;
                break;

              default:
                break;
            }

            if (flag) {
              event.stopPropagation();
              event.preventDefault();
            }
          }

          onButtonClick(event) {
            if (this.isOpen()) {
              this.closePopup();
              this.buttonNode.focus();
            }
            else {
              this.openPopup();
              this.setFocusToFirstMenuitem();
            }

            event.stopPropagation();
            event.preventDefault();
          }

          onMenuitemKeydown(event) {
            var tgt = event.currentTarget,
              key = event.key,
              flag = false;

            function isPrintableCharacter (str) {
              return str.length === 1 &amp;&amp; str.match(/\S/);
            }

            if (event.ctrlKey || event.altKey  || event.metaKey) {
              return;
            }

            if (event.shiftKey) {
              if (isPrintableCharacter(key)) {
                this.setFocusByFirstCharacter(tgt, key);
                flag = true;
              }

              if (event.key === 'Tab') {
                this.buttonNode.focus();
                this.closePopup();
                flag = true;
              }
            }
            else {

              switch (key) {
                case ' ':
                 window.location.href=tgt.href;
                 break;

                case 'Esc':
                case 'Escape':
                  this.closePopup();
                  this.buttonNode.focus();
                  flag = true;
                  break;

                case 'Up':
                case 'ArrowUp':
                  this.setFocusToPreviousMenuitem(tgt);
                  flag = true;
                  break;

                case 'ArrowDown':
                case 'Down':
                  this.setFocusToNextMenuitem(tgt);
                  flag = true;
                  break;

                case 'Home':
                case 'PageUp':
                  this.setFocusToFirstMenuitem();
                  flag = true;
                  break;

                case 'End':
                case 'PageDown':
                  this.setFocusToLastMenuitem();
                  flag = true;
                  break;

                case 'Tab':
                  this.closePopup();
                  break;

                default:
                  if (isPrintableCharacter(key)) {
                    this.setFocusByFirstCharacter(tgt, key);
                    flag = true;
                  }
                  break;
              }

            }

            if (flag) {
              event.stopPropagation();
              event.preventDefault();
            }
          }

          onMenuitemMouseover(event) {
            var tgt = event.currentTarget;
            tgt.focus();
          }

          onBackgroundMousedown(event) {
            if (!this.domNode.contains(event.target)) {
              if (this.isOpen()) {
                this.closePopup();
                this.buttonNode.focus();
              }
            }
          }
        }

        // Initialize navigation menu buttons

        window.addEventListener('load', function () {
          var menuButtons = document.querySelectorAll('.menu-button-links');
          for(var i=0; i &lt; menuButtons.length; i++) {
            var menuButton = new MenuButtonLinks(menuButtons[i]);
          }
        });

     </script>

     <div id="example">
      <div class="menu-button-links">
        <button type="button">
          WAI-ARIA Quick Links
          <svg xmlns="https://www.w3.org/2000/svg"
               class="down"
               width="12"
               height="9"
               viewBox="0 0 12 9">
            <polygon points="1 0, 11 0, 6 8"></polygon>
          </svg>
        </button>
        <ul class="menu">
          <li>
            <a href="https://www.w3.org/">
              W3C Home Page
            </a>
          </li>
          <li>
            <a href="https://www.w3.org/standards/webdesign/accessibility">
              W3C Web Accessibility Initiative
            </a>
          </li>
          <li>
            <a href="https://www.w3.org/TR/wai-aria/">
              ARIA Specification
            </a>
          </li>
          <li>
            <a href="https://w3c.github.io/aria-practices/">
              Authoring Practices
            </a>
          </li>
          <li>
            <a href="https://www.w3.org/TR/html-aria/#el-li">
              HTML Accessibility API Mappings
            </a>
          </li>
          <li>
            <a href="https://w3c.github.io/core-aam/#mapping_role">
              Core ARIA Accessibility API Mappings
            </a>
          </li>
          <li>
            <a href="https://www.w3.org/TR/accname-aam-1.1/">
              Accessible Name and Description
            </a>
          </li>
        </ul>
      </div>
     </div>

     <h2>New Keyboard Support</h2>

     <ul>
      <li>Button opens menu moves keyboard focus to a menu option.
        <ul>
          <li><kbd>Space</kbd></li>
          <li><kbd>Enter</kbd></li>
          <li><kbd>Up arrow</kbd></li>
          <li><kbd>Down arrow</kbd></li>
        </ul>
      </li>
      <li>Move through menu options with cursor keys.
        <ul>
          <li><kbd>Up arrow</kbd></li>
          <li><kbd>Down arrow</kbd></li>
          <li><kbd>Home</kbd></li>
          <li><kbd>End</kbd></li>
        </ul>
      </li>
      <li>Move through menu options with first letter keys.</li>
        <ul>
          <li><kbd>A-Z</kbd></li>
          <li><kbd>a-z</kbd></li>
        </ul>
      <li>Close menu and move focus back to button.
        <ul>
          <li><kbd>Escape</kbd></li>
        </ul>
      </li>
     </ul>


      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
    <transcript>
    </transcript>
  </slide>

  <slide>
    <title>Menu Button: Add ARIA roles, properties and states</title>
    <style id="style">
      .menu-button-links {
        margin: 0;
        font-size: 110%;
      }

      .menu-button-links button {
        margin: 0;
        padding: 6px;
        display: inline-block;
        position: relative;
        background-color: #034575;
        border: 1px solid #034575;
        font-size: 0.9em;
        color: white;
        border-radius: 5px;
      }

      .menu-button-links [role="menu"] {
        margin: 0;
        padding: 7px 4px;
        list-style: none;
        display: none;
        position: absolute;
        border: 2px solid #034575;
        border-radius: 5px;
        background-color: #eee;
      }

      .menu-button-links [role="menu"] a {
        margin: 0;
        padding: 6px;
        display: block;
        width: 24em;
        background-color: #eee;
        border: none;
        color: black;
        border-radius: 5px;
        text-decoration: none;
      }

      .menu-button-links [role="menu"] a:hover {
        background-color: #034575;
        color: white;
       }

      .menu-button-links button svg.down {
        padding-left: 0.125em;
        fill: currentColor;
        stroke: currentColor;
      }

      .menu-button-links button[aria-expanded] svg.down {
        transform: rotate(180deg);
      }
    </style>
    <contents>


     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/nav-menu-button-add-aria-markup/output/" target="_webedit">Menu Button example with ARIA markup support on WebEdit</a></p>

     <script id="script">
        class MenuButtonLinks {

          constructor(domNode) {

            this.domNode       = domNode;
            this.buttonNode    = domNode.querySelector('button');
            this.menuNode      = domNode.querySelector('[role="menu"]');
            this.menuitemNodes = []
            this.firstMenuitem = false;
            this.lastMenuitem  = false;
            this.firstChars = [];

            this.buttonNode.addEventListener('keydown', this.onButtonKeydown.bind(this));
            this.buttonNode.addEventListener('click', this.onButtonClick.bind(this));

            var nodes = this.menuNode.querySelectorAll('a');

            for (var i = 0; i &lt; nodes.length; i++) {
              var menuitem = nodes[i];
              this.menuitemNodes.push(menuitem);
              menuitem.tabIndex = -1;
              this.firstChars.push(menuitem.textContent.trim()[0].toLowerCase());

              menuitem.addEventListener('keydown', this.onMenuitemKeydown.bind(this));

              menuitem.addEventListener('mouseover', this.onMenuitemMouseover.bind(this));

              if( !this.firstMenuitem) {
                this.firstMenuitem = menuitem;
              }
              this.lastMenuitem = menuitem;
            }

            domNode.addEventListener('focusin', this.onFocusin.bind(this));
            domNode.addEventListener('focusout', this.onFocusout.bind(this));

            window.addEventListener('mousedown', this.onBackgroundMousedown.bind(this), true);
          }

          // Popup menu methods

          openPopup() {
            var rect = this.menuNode.getBoundingClientRect();
            this.menuNode.style.display = 'block';
            this.buttonNode.setAttribute('aria-expanded', 'true');
          }

          closePopup() {
            if (this.isOpen()) {
              this.buttonNode.removeAttribute('aria-expanded');
              this.menuNode.style.display = 'none';
            }
          }

          isOpen() {
            return this.buttonNode.getAttribute('aria-expanded') === 'true';
          }

          // Focus management methods

          setFocusToMenuitem(newMenuitem) {
            this.menuitemNodes.forEach(function(item) {
              if (item === newMenuitem) {
                item.tabIndex = 0;
                newMenuitem.focus();
              }
              else {
                item.tabIndex = -1;
              }
            });
          }

          setFocusToFirstMenuitem(currentMenuitem) {
            this.setFocusToMenuitem(this.firstMenuitem);
          }

          setFocusToLastMenuitem(currentMenuitem) {
            this.setFocusToMenuitem(this.lastMenuitem);
          }

          setFocusToPreviousMenuitem(currentMenuitem) {
            var newMenuitem, index;

            if (currentMenuitem === this.firstMenuitem) {
              newMenuitem = this.lastMenuitem;
            }
            else {
              index = this.menuitemNodes.indexOf(currentMenuitem);
              newMenuitem = this.menuitemNodes[ index - 1 ];
            }

            this.setFocusToMenuitem(newMenuitem);

            return newMenuitem;
          }

          setFocusToNextMenuitem(currentMenuitem) {
            var newMenuitem, index;

            if (currentMenuitem === this.lastMenuitem) {
              newMenuitem = this.firstMenuitem;
            }
            else {
              index = this.menuitemNodes.indexOf(currentMenuitem);
              newMenuitem = this.menuitemNodes[ index + 1 ];
            }
            this.setFocusToMenuitem(newMenuitem);

            return newMenuitem;
          }

          setFocusByFirstCharacter(currentMenuitem, char) {
            var start, index;

            if (char.length > 1) {
              return;
            }

            char = char.toLowerCase();

            // Get start index for search based on position of currentItem
            start = this.menuitemNodes.indexOf(currentMenuitem) + 1;
            if (start >=  this.menuitemNodes.length) {
              start = 0;
            }

            // Check remaining slots in the menu
            index = this.firstChars.indexOf(char, start);

            // If not found in remaining slots, check from beginning
            if (index === -1) {
              index = this.firstChars.indexOf(char, 0);
            }

            // If match was found...
            if (index > -1) {
              this.setFocusToMenuitem(this.menuitemNodes[index]);
            }
          }

          // Utilities

          getIndexFirstChars(startIndex, char) {
            for (var i = startIndex; i &lt; this.firstChars.length; i++) {
              if (char === this.firstChars[i]) {
                return i;
              }
            }
            return -1;
          }


          // Menu event handlers

          onFocusin(event) {
            this.domNode.classList.add('focus');
          }

          onFocusout(event) {
            this.domNode.classList.remove('focus');
          }

          onButtonKeydown(event) {
            var tgt = event.currentTarget,
              key = event.key,
              flag = false;

            switch (key) {
              case ' ':
              case 'Enter':
              case 'ArrowDown':
              case 'Down':
                this.openPopup();
                this.setFocusToFirstMenuitem();
                flag = true;
               break;

              case 'Esc':
              case 'Escape':
                  this.closePopup();
                  this.buttonNode.focus();
                  flag = true;
                break;

              case 'Up':
              case 'ArrowUp':
                this.openPopup();
                this.setFocusToLastMenuitem();
                flag = true;
                break;

              default:
                break;
            }

            if (flag) {
              event.stopPropagation();
              event.preventDefault();
            }
          }

          onButtonClick(event) {
            if (this.isOpen()) {
              this.closePopup();
              this.buttonNode.focus();
            }
            else {
              this.openPopup();
              this.setFocusToFirstMenuitem();
            }

            event.stopPropagation();
            event.preventDefault();
          }

          onMenuitemKeydown(event) {
            var tgt = event.currentTarget,
              key = event.key,
              flag = false;

            function isPrintableCharacter (str) {
              return str.length === 1 &amp;&amp; str.match(/\S/);
            }

            if (event.ctrlKey || event.altKey  || event.metaKey) {
              return;
            }

            if (event.shiftKey) {
              if (isPrintableCharacter(key)) {
                this.setFocusByFirstCharacter(tgt, key);
                flag = true;
              }

              if (event.key === 'Tab') {
                this.buttonNode.focus();
                this.closePopup();
                flag = true;
              }
            }
            else {

              switch (key) {
                case ' ':
                 window.location.href=tgt.href;
                 break;

                case 'Esc':
                case 'Escape':
                  this.closePopup();
                  this.buttonNode.focus();
                  flag = true;
                  break;

                case 'Up':
                case 'ArrowUp':
                  this.setFocusToPreviousMenuitem(tgt);
                  flag = true;
                  break;

                case 'ArrowDown':
                case 'Down':
                  this.setFocusToNextMenuitem(tgt);
                  flag = true;
                  break;

                case 'Home':
                case 'PageUp':
                  this.setFocusToFirstMenuitem();
                  flag = true;
                  break;

                case 'End':
                case 'PageDown':
                  this.setFocusToLastMenuitem();
                  flag = true;
                  break;

                case 'Tab':
                  this.closePopup();
                  break;

                default:
                  if (isPrintableCharacter(key)) {
                    this.setFocusByFirstCharacter(tgt, key);
                    flag = true;
                  }
                  break;
              }

            }

            if (flag) {
              event.stopPropagation();
              event.preventDefault();
            }
          }

          onMenuitemMouseover(event) {
            var tgt = event.currentTarget;
            tgt.focus();
          }

          onBackgroundMousedown(event) {
            if (!this.domNode.contains(event.target)) {
              if (this.isOpen()) {
                this.closePopup();
                this.buttonNode.focus();
              }
            }
          }
        }

        // Initialize navigation menu buttons

        window.addEventListener('load', function () {
          var menuButtons = document.querySelectorAll('.menu-button-links');
          for(var i=0; i &lt; menuButtons.length; i++) {
            var menuButton = new MenuButtonLinks(menuButtons[i]);
          }
        });

     </script>

     <div id="example">
        <div class="menu-button-links">
          <button type="button"
            id="id-button"
            aria-haspopup="true"
            aria-controls="id-menu">
            WAI-ARIA Quick Links
            <svg xmlns="http://www.w3.org/2000/svg"
                 class="down"
                 width="12"
                 height="9"
                 viewBox="0 0 12 9">
              <polygon points="1 0, 11 0, 6 8"></polygon>
            </svg>
          </button>
          <ul id="id-menu" role="menu" aria-labelledby="id-button">
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/">
                W3C Home Page
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/standards/webdesign/accessibility">
                W3C Web Accessibility Initiative
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/TR/wai-aria/">
                ARIA Specification
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://w3c.github.io/aria-practices/">
                Authoring Practices
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/TR/html-aria/#el-li">
                HTML Accessibility API Mappings
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://w3c.github.io/core-aam/#mapping_role">
                Core ARIA Accessibility API Mappings
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/TR/accname-aam-1.1/">
                Accessible Name and Description
              </a>
            </li>
          </ul>
        </div>
     </div>

      <h2>ARIA Markup</h2>

      <h3>Button Element</h3>
      <ul>
        <li>Button element has the default role of <code>button</code>.</li>
        <li><code>aria-haspopup="true"</code> attribute.</li>
        <li><code>aria-controls</code> attribute references the <code>id</code> of the element with the <code>menu</code> role.</li>
        <li><code>aria-expanded="true"</code> when menu is open, otherwise attribute is not present.</li>
        <li>Accessible name for the button comes from the text content of the button element.</li>
      </ul>

      <h3>Menu and Menuitem Elements</h3>
      <ul>
        <li>Container <code>ul</code> element has the <code>role="menu"</code>.</li>
        <li>Container <code>ul</code> element has the <code>aria-labelledby="id-mb"</code> to provide an accessible name for the menu.</li>
        <li><code>a</code> elements have the <code>role="menuitem"</code>.</li>
        <li><code>li</code> elements have the <code>role="none"</code>, since the list item semantics are not needed due to the <code>menuitem</code> roles being on the <code>a</code> elements.</li>
        <li>Accessible name for the menu items comes from the text content of the anchor elements.</li>
      </ul>



      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
    <transcript>
    </transcript>
  </slide>

  <slide>
    <title>Menu Button: Keyboard Focus Styling</title>
    <style id="style">
      .menu-button-links {
        margin: 0;
        font-size: 110%;
      }

      .menu-button-links button {
        margin: 0;
        padding: 5px;
        display: inline-block;
        position: relative;
        background-color: #034575;
        border: 2px solid white;
        font-size: 0.9em;
        color: white;
        border-radius: 5px;
      }

      .menu-button-links [role="menu"] {
        margin: 0;
        padding: 7px 4px;
        list-style: none;
        display: none;
        position: absolute;
        border: 2px solid #034575;
        border-radius: 5px;
        background-color: #eee;
      }

      .menu-button-links [role="menu"] a {
        margin: 0;
        padding: 4px;
        display: block;
        width: 24em;
        background-color: #eee;
        border: 2px solid #eee;
        color: black;
        border-radius: 5px;
        text-decoration: none;
      }

      .menu-button-links [role="menu"] a:hover {
        background-color: #034575;
        color: white;
       }

      .menu-button-links button svg.down {
        padding-left: 0.125em;
        fill: currentColor;
        stroke: currentColor;
      }

      .menu-button-links button[aria-expanded] svg.down {
        transform: rotate(180deg);
      }

      /* Focus and hover styling */

      .menu-button-links button:focus,
      .menu-button-links button:hover {
        background-color: white;
        border-color: #034575;
        color: #222222;
      }

      .menu-button-links [role="menu"] a:focus,
      .menu-button-links [role="menu"] a:hover {
        background-color: white;
        border-color: #034575;
        color: #222222;
      }

    </style>
    <contents>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/nav-menu-button-add-focus-style/output/" target="_webedit">Menu Button: Keyboard, ARIA and focus styling on WebEdit</a></p>

     <script id="script">
        class MenuButtonLinks {

          constructor(domNode) {

            this.domNode       = domNode;
            this.buttonNode    = domNode.querySelector('button');
            this.menuNode      = domNode.querySelector('[role="menu"]');
            this.menuitemNodes = []
            this.firstMenuitem = false;
            this.lastMenuitem  = false;
            this.firstChars = [];

            this.buttonNode.addEventListener('keydown', this.onButtonKeydown.bind(this));
            this.buttonNode.addEventListener('click', this.onButtonClick.bind(this));

            var nodes = this.menuNode.querySelectorAll('a');

            for (var i = 0; i &lt; nodes.length; i++) {
              var menuitem = nodes[i];
              this.menuitemNodes.push(menuitem);
              menuitem.tabIndex = -1;
              this.firstChars.push(menuitem.textContent.trim()[0].toLowerCase());

              menuitem.addEventListener('keydown', this.onMenuitemKeydown.bind(this));

              menuitem.addEventListener('mouseover', this.onMenuitemMouseover.bind(this));

              if( !this.firstMenuitem) {
                this.firstMenuitem = menuitem;
              }
              this.lastMenuitem = menuitem;
            }

            domNode.addEventListener('focusin', this.onFocusin.bind(this));
            domNode.addEventListener('focusout', this.onFocusout.bind(this));

            window.addEventListener('mousedown', this.onBackgroundMousedown.bind(this), true);
          }

          // Popup menu methods

          openPopup() {
            var rect = this.menuNode.getBoundingClientRect();
            this.menuNode.style.display = 'block';
            this.buttonNode.setAttribute('aria-expanded', 'true');
          }

          closePopup() {
            if (this.isOpen()) {
              this.buttonNode.removeAttribute('aria-expanded');
              this.menuNode.style.display = 'none';
            }
          }

          isOpen() {
            return this.buttonNode.getAttribute('aria-expanded') === 'true';
          }

          // Focus management methods

          setFocusToMenuitem(newMenuitem) {
            this.menuitemNodes.forEach(function(item) {
              if (item === newMenuitem) {
                item.tabIndex = 0;
                newMenuitem.focus();
              }
              else {
                item.tabIndex = -1;
              }
            });
          }

          setFocusToFirstMenuitem(currentMenuitem) {
            this.setFocusToMenuitem(this.firstMenuitem);
          }

          setFocusToLastMenuitem(currentMenuitem) {
            this.setFocusToMenuitem(this.lastMenuitem);
          }

          setFocusToPreviousMenuitem(currentMenuitem) {
            var newMenuitem, index;

            if (currentMenuitem === this.firstMenuitem) {
              newMenuitem = this.lastMenuitem;
            }
            else {
              index = this.menuitemNodes.indexOf(currentMenuitem);
              newMenuitem = this.menuitemNodes[ index - 1 ];
            }

            this.setFocusToMenuitem(newMenuitem);

            return newMenuitem;
          }

          setFocusToNextMenuitem(currentMenuitem) {
            var newMenuitem, index;

            if (currentMenuitem === this.lastMenuitem) {
              newMenuitem = this.firstMenuitem;
            }
            else {
              index = this.menuitemNodes.indexOf(currentMenuitem);
              newMenuitem = this.menuitemNodes[ index + 1 ];
            }
            this.setFocusToMenuitem(newMenuitem);

            return newMenuitem;
          }

          setFocusByFirstCharacter(currentMenuitem, char) {
            var start, index;

            if (char.length > 1) {
              return;
            }

            char = char.toLowerCase();

            // Get start index for search based on position of currentItem
            start = this.menuitemNodes.indexOf(currentMenuitem) + 1;
            if (start >=  this.menuitemNodes.length) {
              start = 0;
            }

            // Check remaining slots in the menu
            index = this.firstChars.indexOf(char, start);

            // If not found in remaining slots, check from beginning
            if (index === -1) {
              index = this.firstChars.indexOf(char, 0);
            }

            // If match was found...
            if (index > -1) {
              this.setFocusToMenuitem(this.menuitemNodes[index]);
            }
          }

          // Utilities

          getIndexFirstChars(startIndex, char) {
            for (var i = startIndex; i &lt; this.firstChars.length; i++) {
              if (char === this.firstChars[i]) {
                return i;
              }
            }
            return -1;
          }


          // Menu event handlers

          onFocusin(event) {
            this.domNode.classList.add('focus');
          }

          onFocusout(event) {
            this.domNode.classList.remove('focus');
          }

          onButtonKeydown(event) {
            var tgt = event.currentTarget,
              key = event.key,
              flag = false;

            switch (key) {
              case ' ':
              case 'Enter':
              case 'ArrowDown':
              case 'Down':
                this.openPopup();
                this.setFocusToFirstMenuitem();
                flag = true;
               break;

              case 'Esc':
              case 'Escape':
                  this.closePopup();
                  this.buttonNode.focus();
                  flag = true;
                break;

              case 'Up':
              case 'ArrowUp':
                this.openPopup();
                this.setFocusToLastMenuitem();
                flag = true;
                break;

              default:
                break;
            }

            if (flag) {
              event.stopPropagation();
              event.preventDefault();
            }
          }

          onButtonClick(event) {
            if (this.isOpen()) {
              this.closePopup();
              this.buttonNode.focus();
            }
            else {
              this.openPopup();
              this.setFocusToFirstMenuitem();
            }

            event.stopPropagation();
            event.preventDefault();
          }

          onMenuitemKeydown(event) {
            var tgt = event.currentTarget,
              key = event.key,
              flag = false;

            function isPrintableCharacter (str) {
              return str.length === 1 &amp;&amp; str.match(/\S/);
            }

            if (event.ctrlKey || event.altKey  || event.metaKey) {
              return;
            }

            if (event.shiftKey) {
              if (isPrintableCharacter(key)) {
                this.setFocusByFirstCharacter(tgt, key);
                flag = true;
              }

              if (event.key === 'Tab') {
                this.buttonNode.focus();
                this.closePopup();
                flag = true;
              }
            }
            else {

              switch (key) {
                case ' ':
                 window.location.href=tgt.href;
                 break;

                case 'Esc':
                case 'Escape':
                  this.closePopup();
                  this.buttonNode.focus();
                  flag = true;
                  break;

                case 'Up':
                case 'ArrowUp':
                  this.setFocusToPreviousMenuitem(tgt);
                  flag = true;
                  break;

                case 'ArrowDown':
                case 'Down':
                  this.setFocusToNextMenuitem(tgt);
                  flag = true;
                  break;

                case 'Home':
                case 'PageUp':
                  this.setFocusToFirstMenuitem();
                  flag = true;
                  break;

                case 'End':
                case 'PageDown':
                  this.setFocusToLastMenuitem();
                  flag = true;
                  break;

                case 'Tab':
                  this.closePopup();
                  break;

                default:
                  if (isPrintableCharacter(key)) {
                    this.setFocusByFirstCharacter(tgt, key);
                    flag = true;
                  }
                  break;
              }

            }

            if (flag) {
              event.stopPropagation();
              event.preventDefault();
            }
          }

          onMenuitemMouseover(event) {
            var tgt = event.currentTarget;
            tgt.focus();
          }

          onBackgroundMousedown(event) {
            if (!this.domNode.contains(event.target)) {
              if (this.isOpen()) {
                this.closePopup();
                this.buttonNode.focus();
              }
            }
          }
        }

        // Initialize navigation menu buttons

        window.addEventListener('load', function () {
          var menuButtons = document.querySelectorAll('.menu-button-links');
          for(var i=0; i &lt; menuButtons.length; i++) {
            var menuButton = new MenuButtonLinks(menuButtons[i]);
          }
        });

     </script>

     <div id="example">
        <div class="menu-button-links">
          <button type="button"
            id="id-button"
            aria-haspopup="true"
            aria-controls="id-menu">
            WAI-ARIA Quick Links
            <svg xmlns="http://www.w3.org/2000/svg"
                 class="down"
                 width="12"
                 height="9"
                 viewBox="0 0 12 9">
              <polygon points="1 0, 11 0, 6 8"></polygon>
            </svg>
          </button>
          <ul id="id-menu" role="menu" aria-labelledby="id-button">
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/">
                W3C Home Page
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/standards/webdesign/accessibility">
                W3C Web Accessibility Initiative
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/TR/wai-aria/">
                ARIA Specification
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://w3c.github.io/aria-practices/">
                Authoring Practices
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/TR/html-aria/#el-li">
                HTML Accessibility API Mappings
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://w3c.github.io/core-aam/#mapping_role">
                Core ARIA Accessibility API Mappings
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/TR/accname-aam-1.1/">
                Accessible Name and Description
              </a>
            </li>
          </ul>
        </div>
     </div>

      <h2>Focus Styling</h2>

      <ul>
        <li>Focus and hover provide a visual border using CSS <code>border</code> property and background color change.</li>
      </ul>

      <h2>ARIA Markup</h2>

      <h3>Button Element</h3>
      <ul>
        <li>Button element has the default role of <code>button</code>.</li>
        <li><code>aria-haspopup="true"</code> attribute.</li>
        <li><code>aria-controls</code> attribute references the <code>id</code> of the element with the <code>menu</code> role.</li>
        <li><code>aria-expanded="true"</code> when menu is open, otherwise attribute is not present.</li>
        <li>Accessible name for the button comes from the text content of the button element.</li>
      </ul>

      <h3>Menu and Menuitem Elements</h3>
      <ul>
        <li>Container <code>ul</code> element has the <code>role="menu"</code>.</li>
        <li>Container <code>ul</code> element has the <code>aria-labelledby="id-mb"</code> to provide an accessible name for the menu.</li>
        <li><code>a</code> elements have the <code>role="menuitem"</code>.</li>
        <li><code>li</code> elements have the <code>role="none"</code>, since the list item semantics are not needed due to the <code>menuitem</code> roles being on the <code>a</code> elements.</li>
        <li>Accessible name for the menu items comes from the text content of the anchor elements.</li>
      </ul>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
    <transcript>
    </transcript>
  </slide>

  <slide>
    <title>Menu Button: High Contrast Support</title>
    <style id="style">
      .menu-button-links {
        margin: 0;
        font-size: 110%;
      }

      .menu-button-links button {
        margin: 0;
        padding: 6px;
        display: inline-block;
        position: relative;
        background-color: #034575;
        border: 1px solid white;
        font-size: 0.9em;
        color: white;
        border-radius: 5px;
      }

      .menu-button-links [role="menu"] {
        margin: 0;
        padding: 7px 4px;
        list-style: none;
        display: none;
        position: absolute;
        border: 2px solid #034575;
        border-radius: 5px;
        background-color: #eee;
      }

      .menu-button-links [role="menu"] a {
        margin: 0;
        padding: 6px;
        display: block;
        width: 24em;
        background-color: #eee;
        border: none;
        color: black;
        border-radius: 5px;
        text-decoration: none;
      }

      .menu-button-links button svg.down {
        padding-left: 0.125em;
        fill: currentColor;
        stroke: currentColor;
      }

      .menu-button-links button[aria-expanded] svg.down {
        transform: rotate(180deg);
      }

      /* Focus and hover styling */

      .menu-button-links button:focus,
      .menu-button-links button:hover {
        padding: 4px;
        background-color: white;
        border: 3px solid #034575;
        color: #222222;
      }

      .menu-button-links [role="menu"] a:focus,
      .menu-button-links [role="menu"] a:hover {
        padding: 4px;
        background-color: white;
        border: 2px solid #034575;
        color: #222222;
      }

    </style>
    <contents>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/nav-menu-button-accessible/output/" target="_webedit">Menu Button: Keyboard, ARIA and high contrast on WebEdit</a></p>

     <script id="script">
        class MenuButtonLinks {

          constructor(domNode) {

            this.domNode       = domNode;
            this.buttonNode    = domNode.querySelector('button');
            this.menuNode      = domNode.querySelector('[role="menu"]');
            this.menuitemNodes = []
            this.firstMenuitem = false;
            this.lastMenuitem  = false;
            this.firstChars = [];

            this.buttonNode.addEventListener('keydown', this.onButtonKeydown.bind(this));
            this.buttonNode.addEventListener('click', this.onButtonClick.bind(this));

            var nodes = this.menuNode.querySelectorAll('a');

            for (var i = 0; i &lt; nodes.length; i++) {
              var menuitem = nodes[i];
              this.menuitemNodes.push(menuitem);
              menuitem.tabIndex = -1;
              this.firstChars.push(menuitem.textContent.trim()[0].toLowerCase());

              menuitem.addEventListener('keydown', this.onMenuitemKeydown.bind(this));

              menuitem.addEventListener('mouseover', this.onMenuitemMouseover.bind(this));

              if( !this.firstMenuitem) {
                this.firstMenuitem = menuitem;
              }
              this.lastMenuitem = menuitem;
            }

            domNode.addEventListener('focusin', this.onFocusin.bind(this));
            domNode.addEventListener('focusout', this.onFocusout.bind(this));

            window.addEventListener('mousedown', this.onBackgroundMousedown.bind(this), true);
          }

          // Popup menu methods

          openPopup() {
            var rect = this.menuNode.getBoundingClientRect();
            this.menuNode.style.display = 'block';
            this.buttonNode.setAttribute('aria-expanded', 'true');
          }

          closePopup() {
            if (this.isOpen()) {
              this.buttonNode.removeAttribute('aria-expanded');
              this.menuNode.style.display = 'none';
            }
          }

          isOpen() {
            return this.buttonNode.getAttribute('aria-expanded') === 'true';
          }

          // Focus management methods

          setFocusToMenuitem(newMenuitem) {
            this.menuitemNodes.forEach(function(item) {
              if (item === newMenuitem) {
                item.tabIndex = 0;
                newMenuitem.focus();
              }
              else {
                item.tabIndex = -1;
              }
            });
          }

          setFocusToFirstMenuitem(currentMenuitem) {
            this.setFocusToMenuitem(this.firstMenuitem);
          }

          setFocusToLastMenuitem(currentMenuitem) {
            this.setFocusToMenuitem(this.lastMenuitem);
          }

          setFocusToPreviousMenuitem(currentMenuitem) {
            var newMenuitem, index;

            if (currentMenuitem === this.firstMenuitem) {
              newMenuitem = this.lastMenuitem;
            }
            else {
              index = this.menuitemNodes.indexOf(currentMenuitem);
              newMenuitem = this.menuitemNodes[ index - 1 ];
            }

            this.setFocusToMenuitem(newMenuitem);

            return newMenuitem;
          }

          setFocusToNextMenuitem(currentMenuitem) {
            var newMenuitem, index;

            if (currentMenuitem === this.lastMenuitem) {
              newMenuitem = this.firstMenuitem;
            }
            else {
              index = this.menuitemNodes.indexOf(currentMenuitem);
              newMenuitem = this.menuitemNodes[ index + 1 ];
            }
            this.setFocusToMenuitem(newMenuitem);

            return newMenuitem;
          }

          setFocusByFirstCharacter(currentMenuitem, char) {
            var start, index;

            if (char.length > 1) {
              return;
            }

            char = char.toLowerCase();

            // Get start index for search based on position of currentItem
            start = this.menuitemNodes.indexOf(currentMenuitem) + 1;
            if (start >=  this.menuitemNodes.length) {
              start = 0;
            }

            // Check remaining slots in the menu
            index = this.firstChars.indexOf(char, start);

            // If not found in remaining slots, check from beginning
            if (index === -1) {
              index = this.firstChars.indexOf(char, 0);
            }

            // If match was found...
            if (index > -1) {
              this.setFocusToMenuitem(this.menuitemNodes[index]);
            }
          }

          // Utilities

          getIndexFirstChars(startIndex, char) {
            for (var i = startIndex; i &lt; this.firstChars.length; i++) {
              if (char === this.firstChars[i]) {
                return i;
              }
            }
            return -1;
          }


          // Menu event handlers

          onFocusin(event) {
            this.domNode.classList.add('focus');
          }

          onFocusout(event) {
            this.domNode.classList.remove('focus');
          }

          onButtonKeydown(event) {
            var tgt = event.currentTarget,
              key = event.key,
              flag = false;

            switch (key) {
              case ' ':
              case 'Enter':
              case 'ArrowDown':
              case 'Down':
                this.openPopup();
                this.setFocusToFirstMenuitem();
                flag = true;
               break;

              case 'Esc':
              case 'Escape':
                  this.closePopup();
                  this.buttonNode.focus();
                  flag = true;
                break;

              case 'Up':
              case 'ArrowUp':
                this.openPopup();
                this.setFocusToLastMenuitem();
                flag = true;
                break;

              default:
                break;
            }

            if (flag) {
              event.stopPropagation();
              event.preventDefault();
            }
          }

          onButtonClick(event) {
            if (this.isOpen()) {
              this.closePopup();
              this.buttonNode.focus();
            }
            else {
              this.openPopup();
              this.setFocusToFirstMenuitem();
            }

            event.stopPropagation();
            event.preventDefault();
          }

          onMenuitemKeydown(event) {
            var tgt = event.currentTarget,
              key = event.key,
              flag = false;

            function isPrintableCharacter (str) {
              return str.length === 1 &amp;&amp; str.match(/\S/);
            }

            if (event.ctrlKey || event.altKey  || event.metaKey) {
              return;
            }

            if (event.shiftKey) {
              if (isPrintableCharacter(key)) {
                this.setFocusByFirstCharacter(tgt, key);
                flag = true;
              }

              if (event.key === 'Tab') {
                this.buttonNode.focus();
                this.closePopup();
                flag = true;
              }
            }
            else {

              switch (key) {
                case ' ':
                 window.location.href=tgt.href;
                 break;

                case 'Esc':
                case 'Escape':
                  this.closePopup();
                  this.buttonNode.focus();
                  flag = true;
                  break;

                case 'Up':
                case 'ArrowUp':
                  this.setFocusToPreviousMenuitem(tgt);
                  flag = true;
                  break;

                case 'ArrowDown':
                case 'Down':
                  this.setFocusToNextMenuitem(tgt);
                  flag = true;
                  break;

                case 'Home':
                case 'PageUp':
                  this.setFocusToFirstMenuitem();
                  flag = true;
                  break;

                case 'End':
                case 'PageDown':
                  this.setFocusToLastMenuitem();
                  flag = true;
                  break;

                case 'Tab':
                  this.closePopup();
                  break;

                default:
                  if (isPrintableCharacter(key)) {
                    this.setFocusByFirstCharacter(tgt, key);
                    flag = true;
                  }
                  break;
              }

            }

            if (flag) {
              event.stopPropagation();
              event.preventDefault();
            }
          }

          onMenuitemMouseover(event) {
            var tgt = event.currentTarget;
            tgt.focus();
          }

          onBackgroundMousedown(event) {
            if (!this.domNode.contains(event.target)) {
              if (this.isOpen()) {
                this.closePopup();
                this.buttonNode.focus();
              }
            }
          }
        }

        // Initialize navigation menu buttons

        window.addEventListener('load', function () {
          var menuButtons = document.querySelectorAll('.menu-button-links');
          for(var i=0; i &lt; menuButtons.length; i++) {
            var menuButton = new MenuButtonLinks(menuButtons[i]);
          }
        });

     </script>

     <div id="example">
        <div class="menu-button-links">
          <button type="button"
            id="id-button"
            aria-haspopup="true"
            aria-controls="id-menu">
            WAI-ARIA Quick Links
            <svg xmlns="http://www.w3.org/2000/svg"
                 class="down"
                 width="12"
                 height="9"
                 viewBox="0 0 12 9">
              <polygon points="1 0, 11 0, 6 8"></polygon>
            </svg>
          </button>
          <ul id="id-menu" role="menu" aria-labelledby="id-button">
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/">
                W3C Home Page
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/standards/webdesign/accessibility">
                W3C Web Accessibility Initiative
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/TR/wai-aria/">
                ARIA Specification
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://w3c.github.io/aria-practices/">
                Authoring Practices
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/TR/html-aria/#el-li">
                HTML Accessibility API Mappings
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://w3c.github.io/core-aam/#mapping_role">
                Core ARIA Accessibility API Mappings
              </a>
            </li>
            <li role="none">
              <a role="menuitem" href="https://www.w3.org/TR/accname-aam-1.1/">
                Accessible Name and Description
              </a>
            </li>
          </ul>
        </div>
     </div>

      <h2>High Contrast Support</h2>

      <ul>
        <li>When <code>button</code> does <em>not</em> have focus, CSS <code>border</code> property is set to <code>1px</code>.</li>
        <li>When <code>button</code> does have focus, CSS <code>border</code> property is set to <code>3px</code> and padding is reduced by <code>2px</code>.</li>
        <li>When <code>menuitem</code> does <em>not</em> have focus, CSS <code>border</code> property is set to <code>none</code>.</li>
        <li>When <code>menuitem</code> does have focus, CSS <code>border</code> property is set to <code>2px</code> and padding is reduced by <code>2px</code>.</li>
      </ul>

      <h2>ARIA Markup</h2>

      <h3>Button Element</h3>
      <ul>
        <li>Button element has the default role of <code>button</code>.</li>
        <li><code>aria-haspopup="true"</code> attribute.</li>
        <li><code>aria-controls</code> attribute references the <code>id</code> of the element with the <code>menu</code> role.</li>
        <li><code>aria-expanded="true"</code> when menu is open, otherwise attribute is not present.</li>
        <li>Accessible name for the button comes from the text content of the button element.</li>
      </ul>

      <h3>Menu and Menuitem Elements</h3>
      <ul>
        <li>Container <code>ul</code> element has the <code>role="menu"</code>.</li>
        <li>Container <code>ul</code> element has the <code>aria-labelledby="id-mb"</code> to provide an accessible name for the menu.</li>
        <li><code>a</code> elements have the <code>role="menuitem"</code>.</li>
        <li><code>li</code> elements have the <code>role="none"</code>, since the list item semantics are not needed due to the <code>menuitem</code> roles being on the <code>a</code> elements.</li>
        <li>Accessible name for the menu items comes from the text content of the anchor elements.</li>
      </ul>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
    <transcript>
    </transcript>
  </slide>

  <slide>
    <title>Navigation Links: Disclosure Pattern</title>
    <style id="style">
      .disclosure-button-links {
        margin: 0;
        font-size: 110%;
      }

      .disclosure-button-links button {
        margin: 0;
        padding: 6px;
        display: inline-block;
        position: relative;
        background-color: #034575;
        border: 1px solid #034575;
        font-size: 0.9em;
        color: white;
        border-radius: 5px;
      }

      .disclosure-button-links .menu {
        margin: 0;
        padding: 7px 4px;
        list-style: none;
        display: none;
        position: absolute;
        border: 2px solid #034575;
        border-radius: 5px;
        background-color: #eee;
      }

      .disclosure-button-links .menu a {
        margin: 0;
        padding: 6px;
        display: block;
        width: 24em;
        background-color: #eee;
        border: none;
        color: black;
        border-radius: 5px;
        text-decoration: none;
      }

      .disclosure-button-links .menu a:hover {
        background-color: #034575;
        color: white;
       }

      .disclosure-button-links button svg.down {
        padding-left: 0.125em;
        fill: currentColor;
        stroke: currentColor;
      }

      .disclosure-button-links button.open svg.down {
        transform: rotate(180deg);
      }

      /* Focus and hover styling */

      .disclosure-button-links button:focus,
      .disclosure-button-links button:hover {
        padding: 4px;
        background-color: #dddddd;
        border: 3px solid #034575;
        color: #222222;

      }

      .disclosure-button-links a:focus,
      .disclosure-button-links a:hover {
        padding: 4px;
        background-color: #dddddd;
        border: 2px solid #034575;
        color: #222222;
      }
    </style>
    <contents>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/nav-disclosure/output/" target="_webedit">Navigation Links: Disclosure Pattern on WebEdit</a></p>

     <script id="script">
        class DisclosureButtonLinks {

          constructor(domNode) {

            this.domNode       = domNode;
            this.buttonNode    = domNode.querySelector('button');
            this.containerNode = domNode.querySelector('ul');

            this.buttonNode.addEventListener('click', this.onButtonClick.bind(this));
            this.buttonNode.addEventListener('blur', this.onBlur.bind(this));

            const links = this.containerNode.querySelectorAll('a');
            for (let i = 0; i &lt; links.length; i += 1) {
              links[i].addEventListener('keydown', this.onLinkKeyDown.bind(this));
              links[i].addEventListener('blur', this.onBlur.bind(this));
            }
            window.addEventListener('mousedown', this.onBackgroundMousedown.bind(this), true);
          }

          // Container methods

          openContainer() {
            this.containerNode.style.display = 'block';
            this.buttonNode.setAttribute('aria-expanded', 'true');
          }

          closeContainer() {
            if (this.isOpen()) {
              this.buttonNode.setAttribute('aria-expanded', 'false');
              this.containerNode.style.display = 'none';
            }
          }

          isOpen() {
            return this.buttonNode.getAttribute('aria-expanded') === 'true';
          }

          onButtonClick(event) {
            if (this.isOpen()) {
              this.closeContainer();
            }
            else {
              this.openContainer();
            }

            event.stopPropagation();
            event.preventDefault();
          }

          onLinkKeyDown(event) {
            if (event.key === 'Esc' || event.key === 'Escape') {
              this.closeContainer();
              this.buttonNode.focus();
              event.stopPropagation();
              event.preventDefault();
            }
          }

          onBlur(event) {
            if (!this.domNode.contains(event.relatedTarget)) {
              if (this.isOpen()) {
                this.closeContainer();
              }
            }
          }

          onBackgroundMousedown(event) {
            if (!this.domNode.contains(event.target)) {
              if (this.isOpen()) {
                this.closeContainer();
                this.buttonNode.focus();
              }
            }
          }
        }

        // Initialize navigation disclosure buttons

        window.addEventListener('load', function () {
          const disclosureButtons = document.querySelectorAll('.disclosure-button-links');
          for(let i = 0; i &lt; disclosureButtons.length; i += 1) {
            new DisclosureButtonLinks(disclosureButtons[i]);
          }
        });
     </script>

     <div id="example">
        <div class="disclosure-button-links">
          <button type="button"
            aria-expanded="false"
            aria-controls="id-container">
            WAI-ARIA Quick Links
            <svg xmlns="http://www.w3.org/2000/svg"
                 class="down"
                 width="12"
                 height="9"
                 viewBox="0 0 12 9">
              <polygon points="1 0, 11 0, 6 8"></polygon>
            </svg>
          </button>
          <ul id="id-container" class="menu">
            <li>
              <a href="https://www.w3.org/">
                W3C Home Page
              </a>
            </li>
            <li>
              <a href="https://www.w3.org/standards/webdesign/accessibility">
                W3C Web Accessibility Initiative
              </a>
            </li>
            <li>
              <a href="https://www.w3.org/TR/wai-aria/">
                ARIA Specification
              </a>
            </li>
            <li>
              <a href="https://w3c.github.io/aria-practices/">
                Authoring Practices
              </a>
            </li>
            <li>
              <a href="https://www.w3.org/TR/html-aria/#el-li">
                HTML Accessibility API Mappings
              </a>
            </li>
            <li>
              <a href="https://w3c.github.io/core-aam/#mapping_role">
                Core ARIA Accessibility API Mappings
              </a>
            </li>
            <li>
              <a href="https://www.w3.org/TR/accname-aam-1.1/">
                Accessible Name and Description
              </a>
            </li>
          </ul>
        </div>
      </div>

      <p>More information on the <a href="https://w3c.github.io/aria-practices/#disclosure">ARIA disclosure pattern</a>.</p>

      <h2>Keyboard Features</h2>
      <ul>
        <li>Button open and closes the list of links using <kbd>space</kbd> or <kbd>enter</kbd> key.</li>
        <li>Pressing the <kbd>esc</kbd> key when focus is on a link closes the container element and moves focus back to the button..</li>
      </ul>

      <h2>ARIA Markup</h2>
      <ul>
        <li><code>aria-expanded="true"</code> on the button when the container is open.</li>
        <li><code>aria-expanded="false"</code> on the button when the container is closed.</li>
        <li><code>aria-controls="id-container"</code> on the button to reference the <code>id</code> of container element that opens and closes.</li>
      </ul>

      <h2>High Contrast Support</h2>
      <ul>
        <li>When <code>button</code> does <em>not</em> have focus, CSS <code>border</code> property is set to <code>1px</code>.</li>
        <li>When <code>button</code> does have focus, CSS <code>border</code> property is set to <code>3px</code> and padding is reduced by <code>2px</code>.</li>
        <li>When <code>a</code> element does <em>not</em> have focus, CSS <code>border</code> property is set to <code>none</code>.</li>
        <li>When <code>a</code> element does have focus, CSS <code>border</code> property is set to <code>2px</code> and padding is reduced by <code>2px</code>.</li>
      </ul>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
    <transcript>
    </transcript>
  </slide>

  <slide>
    <title>Using ARIA in HTML (Best Practices)</title>
    <contents>
      <p><a href="https://w3c.github.io/using-aria/">Using ARIA in HTML (Best Practices)</a></p>
      <ul>
        <li>Use native semantics of HTML (e.g. <code>input[type=checkbox]</code> rather than div[role=checkbox]).</li>
        <li>Don't override native semantics of elements (e.g. <code>h2[role="banner]</code>).</li>
        <li>Don't redefine the native semantics of an element (e.g. <code>main[role=main]</code>).</li>
        <li>All interactive ARIA widgets must be operable with the keyboard.</li>
        <li>Do not use role="presentation" or aria-hidden="true" on a visible focusable elements.</li>
        <li>All interactive elements must have an accessible name.</li>
        <li>Live regions (e.g. <code>aria-live</code> attribute and <code>log</code>, <code>status</code>, and <code>alert</code> roles) should be used with extreme caution, only for asynchronous content changes important for the users attention.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>None/Presentation Role</title>
    <contents>
      <h2>ARIA AUthoring Practices</h2>
      <p><a href="https://w3c.github.io/aria-practices/#children_presentational">Section 6: Intentionally Hiding Semantics with the presentation Role </a></p>
      <iframe src="https://w3c.github.io/aria-practices/#children_presentational" width="98%" height="600px"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Hiding Content Techniques</title>
    <contents>

      <table class="table table-striped table-hover" aria-label="tabindex_values">
        <thead>
          <tr>
            <th>Technique</th>
            <th>Technology</th>
            <th>Visual Rendering</th>
            <th>Accessibility Tree (used by screen readers)</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th><code>display: none;</code></th>
            <td>CSS</td>
            <td>Not rendered</td>
            <td>Not included</td>
          </tr>
          <tr>
            <th><code>visibility: hidden;</code></th>
            <td>CSS</td>
            <td>Not rendered, but visual dimension is preserved</td>
            <td>Not included</td>
          </tr>
          <tr>
            <th>
              <pre>
                <code>
                  position: absolute;
                  top: -300em;
                  left: -3000em;
                </code>
              </pre>
            </th>
            <td>CSS</td>
            <td>Not rendered</td>
            <td>Included</td>
          </tr>
          <tr>
            <th><code>aria-hidden="true"</code></th>
            <td>ARIA</td>
            <td>Rendered</td>
            <td>Not included</td>
          </tr>
        </tbody>
      </table>




    </contents>
  </slide>

  <slide>
    <title>Live Region Roles</title>
    <contents>
      <p><a href="https://www.w3.org/TR/wai-aria/#live_region_roles">ARIA live region roles</a></p>
      <iframe src="https://www.w3.org/TR/wai-aria/#live_region_roles" width="98%" height="600px" title="ARIA Live Region Roles"></iframe>
    </contents>
  </slide>

  <slide>
    <title>Live Region Attributes</title>
    <contents>
      <p><a href="https://www.w3.org/TR/wai-aria/#attrs_liveregions">ARIA live region attributes</a></p>
      <iframe src="https://www.w3.org/TR/wai-aria/#attrs_liveregions" width="98%" height="600px" title="ARIA Live Region Atttributes"></iframe>
    </contents>
  </slide>

  <slide>
    <title>ARIA Authoring Practices 1.2</title>
    <contents>
      <p><a href="https://w3c.github.io/aria-practices/">ARIA Authoring Practices 1.2</a></p>
      <ul>
        <li>Combobox design pattern 1.2 that works with assistive technologies.</li>
        <li>New section on communicating value and limits for range widgets.</li>
        <li>New section on navigational links using disclosure, menubar and tree widgets.</li>
        <li>Unit testing of examples for:
          <ul>
            <li>Keyboard interaction.</li>
            <li>Proper use of ARIA roles.</li>
            <li>Proper use of ARIA properties and states.</li>
          </ul>
        </li>
        <li>Linting code quality:
          <ul>
            <li>HTML code</li>
            <li>CSS code</li>
            <li>Javascript code</li>
          </ul>
        </li>
        <li>High contrast support in new and some updated examples:
          <ul>
            <li>Carousel</li>
            <li>Combobox</li>
            <li>Date Pickers</li>
            <li>Menubar</li>
            <li>Menu Button</li>
            <li>Single-Thumb Slider</li>
            <li>Toolbar</li>
            <li>Treeview Navigation</li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>

   <slide>
    <title>ARIA Assistive Technology (AT) Community Group</title>
    <contents>
      <p><a href="https://www.w3.org/community/aria-at/">ARIA and Assistive Technology Community Group</a></p>
      <ul>
        <li>Document how ARIA information is used by screen readers:
          <ul>
            <li>Help developers understand how ARIA features change user experience.</li>
            <li>Help screen reader companies understand their use of ARIA.</li>
          </ul>
        </li>
        <li>Develop test cases for testing ARIA features based on ARIA Authoring practice examples.</li>
        <li>Coordinate testing of screen readers.</li>
        <li>Develop reports of test results.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Open Source Tools</title>
    <contents>
      <ul>
        <li><a href="https://addons.mozilla.org/en-US/firefox/addon/ainspector-sidebar/">AInspector Sidebar for Firefox</a></li>
        <li><a href="https://fae.disability.illinois.edu">Functional Accessibility Evaluator 2.0</a></li>
        <li><a href="https://accessibility-bookmarklets.org/">Public Bookmarklets Website</a></li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Functional Accessibility Evaluator (FAE) 2.0</title>
    <contents>
      <ul>
        <li>Two versions of Functional Accessibility Evaluator 2.0
          <ul>
            <li><a href="https://fae.disability.illinois.edu">FAE 2.0 Indidvidual License Version</a></li>
            <li><a href="https://fae.illinois.edu">FAE 2.0 Institutional License Version</a> using <a href="https://www.incommon.org/">InCommon</a></li>
          </ul>
        </li>
        <li>Designed for:
          <ul>
            <li>Managers</li>
            <li>Web designers</li>
            <li>Software developers</li>
            <li>Quality assurance testers</li>
            <li>IT Auditors</li>
          </ul>
        </li>
        <li>Website rule result summaries and implementation status</li>
        <li>Page rule result summaries</li>
        <li>Organizes rules by Rule Categories, Rule Scope and WCAG Guidelines</li>
        <li>Archive and share reports</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>AInspector Sidebar for Firefox</title>
    <contents>
      <ul>
        <li><a href="https://ainspector.disability.illinois.edu">https://ainspector.disability.illinois.edu"</a></li>
        <li>Designed for:
          <ul>
            <li>Web designers</li>
            <li>Software developers</li>
            <li>Quality assurance testers</li>
          </ul>
        </li>
        <li>Summary Rule Results
          <ul>
            <li>Rule Categories</li>
            <li>WCAG 2.0 Guideline Summary</li>
          </ul>
        </li>
        <li>Analyzes the browser DOM content</li>
        <li>Highlighting elements</li>
        <li>DOM inspector</li>
      </ul>

    </contents>
  </slide>

  <slide>
    <title>Bookmarklets for Visualizing Accessibility Features</title>
    <contents>
      <ul>
        <li><a href="https://accessibility-bookmarklets.org/">Public Bookmarklets Website</a></li>
        <li>Features:
          <ul>
            <li>Highlight Regions and Elements on page</li>
            <li>Element information</li>
            <li>Default or defined <code>role</code></li>
            <li>Accessible name</li>
            <li>Accessible description</li>
            <li>Important prorperties (e.g the number of items in a list)</li>
          </ul>
        </li>
      </ul>
    </contents>
  </slide>


  <slide>
    <title>Questions and Discussion</title>
    <contents>
    </contents>
  </slide>

</slides>


