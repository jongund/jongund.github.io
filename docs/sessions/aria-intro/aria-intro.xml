<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="funct.css" type="text/css"?>
<?xm-well_formed path="funct.dtd"?>
<slides>
  <lang>en</lang>
  <title>Introduction to ARIA Specification and Practices</title>
  <logo>
    <a href="https://openweba11y.com" aria-label="Open Web Accessibility">
      <span class="brand"><span class="open">Open</span><span class="web">Web</span><span class="a11y">A11y</span></span>
    </a>
  </logo>

  <copyright>
     Copyright &#169; 2024 Jon Gunderson
  </copyright>

  <person>
    <name>Jon Gunderson, Ph.D., CWAP</name>
    <desc href="https://openweba11y.com">Open Web Accessibility Services</desc>
    <desc href="mailto:jongund@openweba11y.com">jongund@openweba11y.com</desc>
  </person>


  <home href="../index.html">All Sessions</home>

  <stylesheet media="screen">../..//css/bootstrap.min.css</stylesheet>
  <stylesheet media="screen">../..//css/html-slides.css</stylesheet>

  <script>../..//js/bootstrap.bundle.min.js</script>
  <script>../..//js/html-slides-2.js</script>
  <script>../../js/html-slides-code.js</script>

  <slide>
    <title>Goals</title>
    <contents>
      <ul>
        <li>ARIA Authoring Practices as a Resource</li>
        <li>Menu Button design pattern and example</li>
      </ul>
      <div class="show-slide-url"></div>
    </contents>
  </slide>


  <slide>
    <title>Summary of W3C Documents</title>
    <contents>
      <table class="table table-striped table-hover" aria-label="tabindex_values">
        <thead>
          <tr>
            <th>Document</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><a href="https://www.w3.org/TR/wai-aria" target="_specification">Accessible Rich Internet Applications Specification</a></td>
            <td>
              <ul>
                <li>Defines the vocabulary for the roles, properties and states to describe the features of a website.</li>
                <li>Adding aria markup does not effect web bowser behavior or rendering, only what is communicated through accessibility APIs to screen readers.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td><a href="https://html.spec.whatwg.org/" target="_specification">HTML living standard</a></td>
            <td>
              <ul>
                <li>Defines the semantics and behaviors of HTML markup.</li>
                <li>Native HTML markup should be used instead of ARIA markup.</li>
                <li>This document is a living standard, so it has no version number and reflects the current state of interoperability of HTML on the web.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td><a href="https://www.w3.org/TR/html-aria/" target="_specification">ARIA in HTML</a></td>
            <td>
              <ul>
                <li>Defines default ARIA roles for HTML elements.</li>
                <li>Restricts ARIA roles that can override the default role, based on the semantics of the element.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>
              <a href="https://www.w3.org/TR/accname-1.1/" target="_specification">Accessible Name and Description Computation</a>
            </td>
            <td>
            <ul>
              <li>Defines the priority and the algorithms for computing accessible name and accessible description.</li>
              <li>Complexity of algorithm due to <code>aria-labelledby</code> and <code>aria-describedby</code> computation.</li>
              <li>Simpler explanation of the <a href="https://w3c.github.io/aria-practices/#names_and_descriptions">basics of naming and describing</a> in ARIA Authoring Practices.</li>
            </ul>
           </td>
          </tr>
          <tr>
            <td><a href="https://w3c.github.io/core-aam/" target="_specification">Core Accessibility API Mappings for ARIA</a></td>
            <td>
              <ul>
                <li>Defines how ARIA roles, properties and states are mapped to specific accessibility APIs.</li>
                <li>Currently supported APIs:
                  <ul>
                    <li>ATK/AT-SPI (Linux/Unix)</li>
                    <li>Microsoft Active Accessibility (MSAA) + IAccessible2</li>
                    <li>Microsoft UI Automate</li>
                    <li>MacOS Accessibility API</li>
                  </ul>
                </li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
  </slide>


  <slide>
    <title>Tabindex and Keyboard Focus</title>
    <contents>
      <ul>
        <li>
          <a href="https://html.spec.whatwg.org/multipage/interaction.html#attr-tabindex">
            HTML tabindex specification
          </a>
        </li>
        <li>
          <a href="https://www.w3.org/TR/html5/editing.html#focus"  target="_specification">HTML focus</a>
          and
          <a href="https://html.spec.whatwg.org/multipage/interaction.html#the-tabindex-attribute"  target="_specification">tabindex</a> requirements.
        </li>
       <li>Actively define visual focus style, since the default browser visual focus styling of focus is typically hard to discern and varies between browsers.</li>
      </ul>

      <h2 id="tabindex_values">Tabindex Values</h2>
      <table class="table table-striped table-hover" aria-label="tabindex_values">
        <thead>
          <tr>
            <th>Value</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>-1</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Not included in the tab order of the page.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>0</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Included in the tab order of the page.</li>
              </ul>
            </td>
          </tr>
          <tr>
            <td>&gt; 0</td>
            <td>
              <ul>
                <li>Support keyboard focus/blur events.</li>
                <li>Defines the tab order of the page.</li>
                <li><strong>Note:</strong> This technique is not recommended due to browser incompatibilities and unpredictable focus behaviors.</li>
              </ul>
            </td>
          </tr>
        </tbody>
      </table>
    </contents>
    <transcript>
      Tabindex is an important feature for identifying which element on the page can receive keyboiard focus and keyboard events.
      For example if I am building a web application and using DIV element to build a interactive menu with Javascript and CSS, I need to use tabindex to make the menu part of the tab sequence of the page and to allow keyboard events to change the menu selection.
      Tabindex values of 0 are used to make elements part of the tab sequence of the page.
      Tabindex values of -1 allow an element to receive keyboard focus and to process keyboard events, but the element is not included in the tabindex of a page.
      Sometimes an element, like an Anchor or link element, which Is normally part of the tab sequence of the page will be used in a more complex tree or menu widget.
      In this case we want to make sure the the link is not part of the tabindex of the web page by we setting its tabindex value to -1.
      The only think I have to say about tabindex values besides 0 and -1 is one is don’t’ do it!
      There are many bad things that can happen and not very much potential benefit to using tabindex values greater than 0.
      I have never used a tabindex value greater than 0 in my 20 years of web development and we don’t have time in this presentation to do a deeper dive.
    </transcript>
  </slide>

  <slide>
    <title>Accessible Name Calculation</title>
    <contents>
        <ul>
          <li><a href="https://www.w3.org/TR/accname-aam/">W3C Accessible Name and Description Computation Specification</a></li>
          <li>In general only <strong>one</strong> technique should be used to define an accessible name, if more than on technique is used the following priortiy is used for the calculation.</li>
        </ul>
        <h2 id="heading_ant">Accessible Name Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-labelledby</code></td>
              <td>
                <ul>
                  <li>The <code>aria-labelledby</code> attribute contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the accessible name.</li>
                  <li>References typically identify visible text on the screen in visual proximity to the control.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>aria-label</code></td>
              <td>
                <ul>
                  <li>The <code>aria-label</code> attribute text content defines the accessible name.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>3</td>
              <td>text content</td>
              <td>
                <ul>
                  <li>Some ARIA widget roles allow the text content of the container element to define an accessible name (e.g. <code>role="checkbox"</code>).</li>
                  <li>Text content includes text alternatives, for example <code>alt</code> attribute content of an <code>img</code> element.</li>
                  <li>Text content includes text from generated CSS, for example when the <code>content</code> property is used.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>4</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an accessible name is found and the element has a <code>title</code> attribute, the content of the <code>title</code> attribute will used to define the accessible name.</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
    <transcript>
      Most ARIA roles need an accessible name or sometimes referred to as a label in HTML.

      Using text on the screen are typically the best sources for the accessible name for controls and widgets, since the text will be the same for both the person using the graphical rendering and the person using a screen reader.

      For example, in the checkbox example we will be going through shortly we will be use the text content of the DIV element for the accessible name.

      This slide provides an overview of the different techniques that can use used to define an accessible name.

      Browsers will first look for an aria-labelledby attribute.

      Aria-labelledby attribute uses ID references to point to text on the web page to create the accessible name.

      If more than one ID is provided the text is concatenated to compute the accessible name.

      This is the most complex way to generate the accessible name and can also be used to include values of other controls and widgets on the page.

      If aria-labelledby is not found the next item the browser will look for is the aria-label attribute.

      In this case the text content of the aria-label attribute is used as a the accessible name.

      If the aria-label attribute is not found and starting with the release of ARIA 1.2 the browser will look for a label role for a small subset of widget roles that can be labeled using encapsulation.

      The label role will typically be defined using the standard HTML LABEL element.

      For the group and radiogroup roles, the LEGEND element can be used to define an accessible name starting in ARIA 1.2.

      Some widget roles like checkbox in our example today, can be labeled use the child text content.

      If no other accessible name has been found for a widget and the element has a title attribute, the content of the title attribute will be used for the accessible name.

      The title attribute is usually not considered a good source for the accessible name, since it is used by many browser to render a tooltip.  Tooltips are generally used more to provide help than a label, so therefore usually not too good as a label.
    </transcript>
  </slide>

  <slide>
    <title>Accessible Description Calculation</title>
    <contents>
        <ul>
          <li><a href="https://www.w3.org/TR/accname-aam/">W3C Accessible Name and Description Computation Specification</a></li>
          <li>Accessible description provides more information about a form control, link or aria widget.</li>
          <li>Screen readers can be configured by users to ignore <em>description information</em> to reduce the amount of information spoken.</li>
        </ul>
        <h2 id="heading_ant">Accessible Description Techniques</h2>
        <table class="table table-striped table-hover" aria-labelledby="heading_ant">
          <thead>
            <tr>
              <th>Priority</th>
              <th>Technique</th>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td><code>aria-describedby</code></td>
              <td>
                <ul>
                  <li>The <code>aria-describedby</code> attribute contains a list of <code>IDREF</code>s to elements on the page.</li>
                  <li>Text content of referenced elements are concatenated to compute the <em>accessible description</em>.</li>
                  <li>Designed to reference visible text on the screen, like instructions and error feedback.</li>
                  <li>Screen readers can be configured not to rendered accessible descriptions to reduce the amount of information spoken.</li>
                </ul>
              </td>
            </tr>
            <tr>
              <td>2</td>
              <td><code>title</code></td>
              <td>
                <ul>
                  <li>If no other source of an <em>accessible description</em> is found and the element has a <code>title</code> attribute that is <strong>not</strong> being used to define an accessible name, the content of the <code>title</code> attribute is used to define the <em>accessible description</em>.</li>
                </ul>
              </td>
            </tr>
          </tbody>
        </table>
    </contents>
    <transcript>
      The accessible description calculation is similar to accessible name, but there are fewer options.

      The description of a widget is typically spoken by a screen reader last after role, accessible name, and any properties and state information.

      Screen reader also can configure their screen reader to not render most descriptions if they find they are a distraction or not very helpful on a web page.

      Similar to aria-labelledby there is an aria-describedby that uses the same algorithm as aria-labelledby, but used to to identify a description.

      Browsers will look for the aria-describedby attribute first.

      If there is not aria-describedby attribute, in the release of ARIA 1.2 there is a new aria-description attribute that can be used, similar to aria-label.

      Last the browser will use the title attribute to define a description, if it is not being used for the accessible name.

    </transcript>
  </slide>

  <slide>
    <title>Other Descriptions: aria-details property</title>
    <style>
      table tbody th {
        font-weight: normal;
      }
    </style>
    <contents>
      <p>
        <code><a href="https://www.w3.org/TR/wai-aria-1.1/#aria-details">aria-details</a></code> provides a reference to additional visible information on the page. The screen reader would announce the availability of additional information and provide a means to navigate to the descriptive content.
      </p>
      <p><strong>NOTE:</strong> This feature was added at the request of DPUB working group, so may have better support in digital book readers.</p>

      <h2>Screen Reader Expectations</h2>
      <ul>
        <li>Announces additional information is available.</li>
        <li>Announces when entering or leaving a details container, similar to landmarks.</li>
        <li>Provides a means to navigate from the reference to the details content.</li>
        <li>Provides a means to navigate from the details content to the reference.</li>
      </ul>

      <h2 id="exp_impl">Implementation</h2>
      <table class="table table-striped table-hover" aria-labelledby="exp_impl">
        <thead>
          <tr>
            <th>Expectation</th>
            <th>NVDA for Windows</th>
            <th>JAWS for Windows</th>
            <th>VoiceOver for macOS</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th>Announces additional information available.</th>
            <td>no</td>
            <td>Yes</td>
            <td>no</td>
          </tr>
          <tr>
            <th>Announces when entering or leaving a details container.</th>
            <td>no</td>
            <td>Yes</td>
            <td>no</td>
          </tr>
          <tr>
            <th>Navigation from reference to details content.</th>
            <td>no</td>
            <td>no</td>
            <td>no</td>
          </tr>
          <tr>
            <th>Navigate from details content to reference.</th>
            <td>no</td>
            <td>no</td>
            <td>no</td>
          </tr>
        </tbody>
      </table>
    </contents>
    <transcript>

    </transcript>
  </slide>

  <slide>
    <title>Other Description: aria-invalid and aria-errormessage properties</title>
    <contents>
      <p><code>aria-errormessage</code> must be used in conjunction with <code>aria-invalid</code> or the <code>invalid</code> state of standard HTML form controls.  When a control is identified as invalid the content referenced will be spoken by the screen reader.</p>

      <p>The coding is similar to <code>aria-describedby</code> property.  The difference is the accessible description can be configured by the user not to be spoken, the use of <code>aria-errormessage</code> is intended to always be spoken by a screen reader when the invalid state is set.</p>

      <h2>Screen Reader Expectations</h2>
      <ul>
        <li>When form control or widget has valid value, screen reader announces nothing.</li>
        <li>When form control or widget has invalid value, screen reader announces control has invalid value.</li>
        <li>When form control or widget has invalid value, screen reader announces referenced message.</li>
      </ul>

      <h2 id="exp_impl">Implementation</h2>
      <table class="table table-striped table-hover" aria-labelledby="exp_impl">
        <thead>
          <tr>
            <th>Expectation</th>
            <th>NVDA for Windows</th>
            <th>JAWS for Windows</th>
            <th>VoiceOver for macOS</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th>No announcement when valid.</th>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
          </tr>
          <tr>
            <th>Announcement when invalid.</th>
            <td>Yes</td>
            <td>Yes</td>
            <td>Yes</td>
          </tr>
          <tr>
            <th>Referenced message announced when invalid.</th>
            <td>no</td>
            <td>Yes</td>
            <td>no</td>
          </tr>
        </tbody>
      </table>

    </contents>
    <transcript>
    </transcript>
  </slide>

  <slide>
    <title>Checkbox Example: Overview</title>
    <contents>
      <ul>
        <li>Learn what ARIA markup does and doesn't do.</li>
        <li>Demonstrate accessibility issues of custom widgets.</li>
        <li>Incrementally add accessibility features.</li>
        <li>Observe changes in user experience as features are added.</li>
        <li>Focus and hover styling.</li>
        <li>High contrast testing.</li>
      </ul>
    </contents>
  </slide>

  <slide>
    <title>Checkbox Example: Inaccessible</title>
    <style id="style">
      fieldset {
           border-color: #EEE;
           width: 10em;
      }

      fieldset legend {
           font-size: 100%;
      }

      label,
      div.checkbox {
           padding: 2px;
           width: 10em;
           display: block;
           margin-top: 0.25em;
           margin-bottom: 0.25em;
      }

      label input {
           margin-right: 0.5em;
      }

      div.checkbox span {
           padding: 0.25em;
           margin-right: 0.25em;
      }
       div.checkbox span:before {
           content: '✗';
           color: red;
      }

      div.checkbox.checked span {
        margin-right: 0.375em;
      }

      div.checkbox.checked span:before {
           content: '✓';
           color: green;
           font-size: 90%;
      }
    </style>
    <contents>
     <h2>Accessibility Issues</h2>
     <ul>
      <li>Keyboard support</li>
      <li>Keyboard focus styling</li>
      <li>Role information</li>
      <li>Accessible name</li>
      <li>State of checkbox</li>
     </ul>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-inaccessible/output/" target="_webedit">Checkbox example on WebEdit</a></p>

     <script id="script">
        function toggleCheckbox(node) {
         if (node.classList.contains('checked')) {
          node.classList.remove('checked');
         } else {
          node.classList.add('checked');
         }
        }

        function clickCheckbox(event) {
         var cb = event.currentTarget;
         toggleCheckbox(cb);
         event.stopPropagation();
         event.preventDefault();
        }
     </script>

     <div id="example">
      <fieldset>
        <legend>
            Pizza Toppings
        </legend>
        <label>
          <input type="checkbox"/>
            Green pepper
         </label>
        <label>
          <input type="checkbox"/>
            Onion
        </label>
        <div class="checkbox"
             onclick="clickCheckbox(event)">
          <span></span>
            Mushrooms
        </div>
        <div class="checkbox"
            onclick="clickCheckbox(event)">
          <span></span>
            Spinach
        </div>
      </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
    <transcript>
      This slide shows a set of 4 checkboxes.
      The first 2 are standard HTML checkboxes and the next two are custom checkboxes made out of DIV elements, Javascript and CSS.
      The accessibility issues for these custom checkboxes include:
      Keyboard support so that screen reader and keyboard only users can interact with the checkbox.
      Keyboard focus styling so that keyboard only users can see that they are interacting with the checkbox.
      Role information on the custom widget being a checkbox.
      Accessible name identifying what the checkbox is about.
      Communicating the state of checkbox.

      As we view the source code you can see that the first two checkboxes are defined using the standard HTML input type checkbox.

      The last two checkbox are defined using DIV elements with event handlers and CSS to define the checked state using the psuedo technique of ::before based on the class name of "checked".

      The Javascript shows a only a click event handler for operation with only the mouse.
    </transcript>
  </slide>

 <slide>
    <title>Basic Screen Reader Commands</title>
    <contents>
      <table class="table table-striped table-hover" aria-label="Basic Screen Reader Commands">
        <thead>
          <tr>
            <th>Action</th>
            <th>JAWS (Windows)</th>
            <th>NVDA (Windows)</th>
            <th>Voice Over (OS X)</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td>Next link, form control or widget</td>
            <td>Tab</td>
            <td>Tab</td>
            <td>Tab</td>
          </tr>
          <tr>
            <td>Previous link, form control or widget</td>
            <td>Shift+Tab</td>
            <td>Shift+Tab</td>
            <td>Shift+Tab</td>
          </tr>
          <tr>
            <td>Re-read current item</td>
            <td>Insert+Numpad 5</td>
            <td>NVDA+Numpad 5 or NVDA+Shift+O</td>
            <td>Command+Option+Space</td>
          </tr>
          <tr>
            <td>More information on item</td>
            <td>Insert+SHIFT+F1 and Insert+Control+Shift+F1</td>
            <td>NVDA+D</td>
            <td>Control+Option+F4</td>
          </tr>
          <tr>
            <td>List of Links</td>
            <td>Insert+F7</td>
            <td>NVDA+F7</td>
            <td>Command+Option+U, then left/right arrow to list of links</td>
          </tr>
          <tr>
            <td>Detailed Keyboard Information</td>
            <td><a href="https://doccenter.freedomscientific.com/doccenter/archives/training/jawskeystrokes.htm">JAWS Keyboard Documentation</a></td>
            <td><a href="https://www.nvaccess.org/files/nvda/documentation/userGuide.html">NVDA Documentation</a></td>
            <td><a href="https://www.apple.com/voiceover/info/guide/">Voice Over Guide</a></td>
          </tr>
        </tbody>
      </table>
    </contents>
    <transcript>
      This slide shows some basic keyboard commands for using screen readers.

      I encourage you to try these examples with a screen reader so you can begin to understand the experience of using a screen reader and see how adding ARIA changes the user experience.

      The examples I am showing today mostly just requires using the TAB key and listening to the information the screen reader is speaking.

      Some screen reader like NVDA and VoiceOver have a optional panel to visually show what they are speaking if it is difficult for you to understand what is being spoken.
    </transcript>
  </slide>

  <slide>
    <title>Checkbox Example: Responding to the keyboard</title>
    <style id="style">
fieldset {
     border-color: #EEE;
     width: 10em;
}

fieldset legend {
     font-size: 100%;
}

label,
div.checkbox {
     padding: 2px;
     width: 10em;
     display: block;
     margin-top: 0.25em;
     margin-bottom: 0.25em;
}

label input {
     margin-right: 0.5em;
}

div.checkbox span {
     padding: 0.25em;
}

div.checkbox span:before {
    content: '✗';
    color: red;
    padding-right: 0.125em;
}

div.checkbox.checked span:before {
    content: '✓';
    color: green;
    padding-right: 0.190em;
}
    </style>
    <contents>
      <ul>
        <li>Adding <code>tabindex="0"</code> to make part of tab order of the page.</li>
        <li>Add <code>onKeyDown</code> event handler to toggle checkbox when <kbd>space</kbd> key is pressed.</li>
      </ul>

      <script id="script" type="text/javascript">
function toggleCheckbox(node) {
 if (node.classList.contains('checked')) {
  node.classList.remove('checked');
 } else {
  node.classList.add('checked');
 }
}

function clickCheckbox(event) {
 var cb = event.currentTarget;
 toggleCheckbox(cb);
 event.stopPropagation();
 event.preventDefault();
}

function keydownCheckbox(event) {
  var cb = event.currentTarget;
  if (event.key === ' ') {
    toggleCheckbox(cb);

    event.stopPropagation();
    event.preventDefault();
  }
}      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-part-1/output/" target="_webedit">Part 1 on WebEdit</a></p>

     <div id="example">
<fieldset>
    <legend>
        Pizza Toppings
    </legend>
    <label>
      <input type="checkbox"/>
        Green pepper
     </label>
    <label>
      <input type="checkbox"/>
        Onion
    </label>
    <div class="checkbox"
         tabindex="0"
         onclick="clickCheckbox(event)"
         onkeydown="keydownCheckbox(event)">
      <span></span>
        Mushrooms
    </div>
    <div class="checkbox"
        tabindex="0"
        onclick="clickCheckbox(event)"
        onkeydown="keydownCheckbox(event)">
      <span></span>
          Spinach
    </div>
  </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
    <transcript>
    </transcript>
  </slide>

  <slide>
    <title>Checkbox Example: Adding ARIA role, checked state and accessible name</title>
    <style id="style">
      fieldset {
           border-color: #EEE;
           width: 10em;
      }

      fieldset legend {
           font-size: 100%;
      }

      label,
      div.checkbox {
           padding: 2px;
           width: 10em;
           display: block;
           margin-top: 0.25em;
           margin-bottom: 0.25em;
      }

      label input {
           margin-right: 0.5em;
      }

      div.checkbox span {
           padding: 0.25em;
      }

      div.checkbox span:before {
          content: '✗';
          color: red;
          padding-right: 0.125em;
      }

      div.checkbox.checked span:before {
          content: '✓';
          color: green;
          padding-right: 0.190em;
      }
    </style>
    <contents>
      <ul>
        <li>Adding <code>role="checkbox"</code> to make part of tab order of the page.</li>
        <li>Adding <code>aria-checked</code> attribute.</li>
        <li>Accessible name from text content.</li>
        <li>Removing state character (e.g. <span style="color: red">✗</span>) from accessible name using <code>aria-hidden</code>.</li>
      </ul>

      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
         if (node.classList.contains('checked')) {
          node.classList.remove('checked');
          node.setAttribute('aria-checked', 'false');
         } else {
          node.classList.add('checked');
          node.setAttribute('aria-checked', 'true');
         }
        }

        function clickCheckbox(event) {
         var cb = event.currentTarget;
         toggleCheckbox(cb);
         event.stopPropagation();
         event.preventDefault();
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.key === ' ') {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }
      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-part-2/output/" target="_webedit">Part 2 on WebEdit</a></p>

     <div id="example">
<fieldset>
    <legend>
        Pizza Toppings
    </legend>
    <label>
      <input type="checkbox"/>
        Green pepper
     </label>
    <label>
      <input type="checkbox"/>
        Onion
    </label>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
         tabindex="0"
         onclick="clickCheckbox(event)"
         onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
        Mushrooms
    </div>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
        tabindex="0"
        onclick="clickCheckbox(event)"
        onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
          Spinach
    </div>
  </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>

    </contents>
  </slide>

 <slide>
    <title>Checkbox Example: Keyboard Focus and hover styling</title>
    <style id="style">
fieldset {
     border-color: #EEE;
     width: 10em;
}

fieldset legend {
     font-size: 100%;
}

label,
div.checkbox {
     padding: 4px;
     width: 10em;
     display: block;
     margin-top: 0.25em;
     margin-bottom: 0.25em;
}

label input {
     margin-right: 0.5em;
}

div.checkbox span {
     padding: 0.25em;
}

div.checkbox span:before {
    content: '✗';
    color: red;
    padding-right: 0.125em;
}

div.checkbox.checked span:before {
    content: '✓';
    color: green;
    padding-right: 0.190em;
}

label.focus,
div.checkbox:focus {
  padding: 2px;
  border: 2px solid #999;
  background-color: #DDE;
}

label:hover,
div.checkbox:hover {
  background-color: #CCD;
}
    </style>
    <contents>
      <ul>
        <li>Keyboard <code>focus</code> and <code>hover</code> styling should be similar to to harmonize the look and feel of styling between interaction techniques.</li>
        <li>Recommend <code>focus</code> styling has a border and <code>hover</code> does not.</li>
        <li><code>focus</code> styling should use a 2 pixel<code>border</code> or <code>outline</code> width to make the control with focus easy for users to see and track.</li>
        <li>If the <code>border</code> technique is used the <code>border</code> must be removed when the widget does not have focus to support focus styling to change when users select operating system high contrast modes.</li>
        <li>Need to use <code>onfocus</code> and <code>onblur</code> events to create focus styling of standard radio buttons and checkboxes by styling their labels.</li>
        <li>Styling background color makes the focus change much easier to detect visually.</li>
      </ul>

      <script id="script" type="text/javascript">
function toggleCheckbox(node) {
 if (node.classList.contains('checked')) {
  node.classList.remove('checked');
  node.setAttribute('aria-checked', 'false');
 } else {
  node.classList.add('checked');
  node.setAttribute('aria-checked', 'true');
 }
}

function clickCheckbox(event) {
 var cb = event.currentTarget;
 toggleCheckbox(cb);
 event.stopPropagation();
 event.preventDefault();
}

function keydownCheckbox(event) {
  var cb = event.currentTarget;
  if (event.key === ' ') {
    toggleCheckbox(cb);

    event.stopPropagation();
    event.preventDefault();
  }
}

function checkboxFocus(event) {
  event.currentTarget.parentElement.classList.add('focus');
}

function checkboxBlur(event) {
  event.currentTarget.parentElement.classList.remove('focus');
}
      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-part-3/output/" target="_webedit">Part 3 on WebEdit</a></p>

     <div id="example">
<fieldset>
    <legend>
        Pizza Toppings
    </legend>
    <label>
      <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
        Green pepper
     </label>
    <label>
      <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
        Onion
    </label>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
         tabindex="0"
         onclick="clickCheckbox(event)"
         onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
        Mushrooms
    </div>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
        tabindex="0"
        onclick="clickCheckbox(event)"
        onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
          Spinach
    </div>
  </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
  </slide>

 <slide>
    <title>Checkbox Example: Synchronization of ARIA and visual states</title>
    <style id="style">
fieldset {
     border-color: #EEE;
     width: 10em;
}

fieldset legend {
     font-size: 100%;
}

label,
[role="checkbox"] {
     padding: 4px;
     width: 10em;
     display: block;
     margin-top: 0.25em;
     margin-bottom: 0.25em;
}

label input {
     margin-right: 0.5em;
}

[role="checkbox"] span {
     padding: 0.25em;
}

[role="checkbox"] span:before {
    content: '✗';
    color: red;
    padding-right: 0.125em;
}

[role="checkbox"][aria-checked="true"] span:before {
    content: '✓';
    color: green;
    padding-right: 0.190em;
}

label.focus,
[role="checkbox"]:focus {
  padding: 2px;
  border: 2px solid #999;
  background-color: #DDE;
}

label:hover,
[role="checkbox"]:hover {
  background-color: #CCD;
}
    </style>
    <contents>
      <ul>
        <li>Using CSS attribute selectors and CSS <code>content</code> property to synchronize visual and aria states.</li>
        <li>Use of CSS <code>content</code> property supports high contrast browser settings, unike the use of CSS <code>background-image</code>.</li>
      </ul>

      <script id="script" type="text/javascript">
function toggleCheckbox(node) {
 if (node.getAttribute('aria-checked') === 'true') {
  node.setAttribute('aria-checked', 'false');
 } else {
  node.setAttribute('aria-checked', 'true');
 }
}

function clickCheckbox(event) {
 var cb = event.currentTarget;
 toggleCheckbox(cb);
 event.stopPropagation();
 event.preventDefault();
}

function keydownCheckbox(event) {
  var cb = event.currentTarget;
  if (event.key === ' ') {
    toggleCheckbox(cb);

    event.stopPropagation();
    event.preventDefault();
  }
}

function checkboxFocus(event) {
  event.currentTarget.parentElement.classList.add('focus');
}

function checkboxBlur(event) {
  event.currentTarget.parentElement.classList.remove('focus');
}
      </script>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-part-4/output/" target="_webedit">Part 4 on WebEdit</a></p>

     <div id="example">
<h1>Part 4: Custom Checkbox Widget with synchronization of ARIA and visual states</h1>
<fieldset>
    <legend>
        Pizza Toppings
    </legend>
    <label>
      <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
        Green pepper
     </label>
    <label>
      <input type="checkbox"
             onfocus="checkboxFocus(event)"
             onblur="checkboxBlur(event)"/>
        Onion
    </label>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
         tabindex="0"
         onclick="clickCheckbox(event)"
         onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
        Mushrooms
    </div>
    <div class="checkbox"
         role="checkbox"
         aria-checked="false"
        tabindex="0"
        onclick="clickCheckbox(event)"
        onkeydown="keydownCheckbox(event)">
      <span aria-hidden="true"></span>
          Spinach
    </div>
  </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
    </contents>
  </slide>

  <slide>
    <title>Checkbox Example: Summary of Accessibility Features</title>
    <style id="style">
      fieldset {
        border-color: #EEE;
        width: 10em;
      }

      fieldset legend {
        font-size: 100%;
      }

      label,
      [role="checkbox"] {
        display: block;
        margin: 0.25em;
        font-weight: normal;
        padding: 4px;
        border: none;
        width: 10em;
      }

      label input[type=checkbox] {
        padding-left: 1em;
      }

      div[role="checkbox"] span:before {
        content: '✗';
        color: red;
        padding-left: 0.125em;
        padding-right: 0.25em;
      }

      div[role="checkbox"][aria-checked="true"] span:before {
        content: '✓';
        color: green;
        padding-left: 0.125em;
        padding-right: 0.315em;
      }

      label.focus,
      [role="checkbox"]:focus {
        padding: 2px;
        border: 2px solid #999;
        background-color: #DDE;
      }

      label:hover,
      [role="checkbox"]:hover {
        background-color: #CCD;
      }
    </style>
    <contents>


      <script id="script" type="text/javascript">
        function toggleCheckbox(node) {
          if (node.getAttribute('aria-checked') === 'true') {
            node.setAttribute('aria-checked', 'false');
          }
          else {
            node.setAttribute('aria-checked', 'true');
          }
        }

        function keydownCheckbox(event) {
          var cb = event.currentTarget;
          if (event.key === ' ') {
            toggleCheckbox(cb);

            event.stopPropagation();
            event.preventDefault();
          }
        }

        function clickCheckbox(event) {
          var cb = event.currentTarget;
          toggleCheckbox(cb);
          event.stopPropagation();
          event.preventDefault();
        }

        function checkboxFocus(event) {
          event.currentTarget.parentNode.classList.add('focus');
        }

        function checkboxBlur(event) {
          event.currentTarget.parentNode.classList.remove('focus');
        }
      </script>

     <h2>Features</h2>
     <ul>
       <li>Responds to mouse events using <code>onClick</code> event.</li>
       <li>Responds to <kbd>space</kbd> keyboard event using <code>onKeyDown</code> event.</li>
       <li><code>tabindex=0</code> makes widget keyboard focusable and include in tab order of page.</li>
       <li><code>role="checkbox"</code> identifies widget to assistive technologies as a "checkbox".</li>
       <li><code>aria-checked</code> attribute identifies the state as being "checked" or "unchecked".</li>
       <li>Accessible name comes from child text content of the <code>div[role="checkbox"]</code> element.</li>
       <li><code>aria-hidden</code> attribute hides the characters used for indicating state (i.e. <span style="color: red">✗</span> and <span style="color: green">✓</span>) from being included in the accessible name calculation.</li>
       <li>CSS attribute selectors are used to keep the visual indication of checked state snychronized with accessibility API.</li>
       <li><code>onFocus</code> and <code>onBlur</code> event handlers are used on standard checkboxes to provide visual indication of keyboard focus.</li>
     </ul>

     <h2>Example</h2>

     <p><a href="https://webedit.disability.illinois.edu/user/jongund/checkbox-accessible/output/" target="_webedit">Checkbox example on WebEdit</a></p>

     <div id="example">
    <fieldset>
        <legend>

            Pizza Toppings

        </legend>
        <label>
          <input type="checkbox"
               onfocus="checkboxFocus(event)"
               onblur="checkboxBlur(event)"/>


              Green pepper

        </label>
        <label>
          <input type="checkbox"
               onfocus="checkboxFocus(event)"
               onblur="checkboxBlur(event)"/>

              Onion

        </label>
        <div role="checkbox"
           tabindex="0"
           aria-checked="false"
           onkeydown="keydownCheckbox(event)"
           onclick="clickCheckbox(event)">
          <span aria-hidden="true"></span>

              Mushrooms

        </div>
        <div role="checkbox"
           tabindex="0"
           aria-checked="false"
           onkeydown="keydownCheckbox(event)"
           onclick="clickCheckbox(event)">
          <span aria-hidden="true"></span>

              Spinach

        </div>
      </fieldset>
     </div>

      <h2>HTML Source Code</h2>

      <pre><code id="sc1"></code></pre>

      <h2>CSS Source Code</h2>

      <pre><code id="sc2"></code></pre>

      <h2>Javascript Source Code</h2>

      <pre><code id="sc3"></code></pre>

      <script type="text/javascript">
        sourceCode.add('sc1', 'example');
        sourceCode.add('sc2', 'style');
        sourceCode.add('sc3', 'script');
        sourceCode.make();
        hljs.initHighlightingOnLoad();
      </script>
   </contents>
  </slide>

  <slide>
    <title>Questions and Discussion</title>
    <contents>
    </contents>
  </slide>

</slides>


